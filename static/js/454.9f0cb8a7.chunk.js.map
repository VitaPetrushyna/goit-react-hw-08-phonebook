{"version":3,"file":"static/js/454.9f0cb8a7.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","redux/contacts/filterSlice.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\n// export const getVisibleContacts = createSelector(\n//   [getContacts, getFilter],\n//   (contacts, filter) => {\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(({ name }) =>\n//       name.toLowerCase().includes(normalizedFilter)\n//     );\n//   }\n// );\n","import styled from 'styled-components';\n\nexport const ListContacts = styled.ul`\n  width: 400px;\n\n  margin: 0 auto;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n`;\n\nexport const ContactsItem = styled.li`\n  margin: 10px;\n`;\n\nexport const DeleteBtn = styled.button`\n  margin-left: 10px;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n  background-color: #719ae2;\n  cursor: pointer;\n  color: #0d0d0d;\n  border: gray;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { ListContacts, ContactsItem, DeleteBtn } from './ContactList.styled';\n\nexport function ContactList() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  console.log(filter);\n  // const visibleContacts = useSelector(getVisibleContacts);\n  // const contacts = useSelector(getContacts);\n\n  const handleDeleteContact = deleteId => {\n    const action = deleteContact(deleteId);\n    dispatch(action);\n  };\n\n  // const filteredContacts = () => {\n  //   // const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(filter)\n  //   );\n  // };\n\n  // const filteredContactList = filteredContacts();\n\n  return (\n    <ListContacts>\n      {contacts.map(({ name, number, id }) => (\n        <ContactsItem key={id}>\n          {name + ' : ' + number}\n          {\n            <DeleteBtn\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => handleDeleteContact(id)}\n            >\n              Delete\n            </DeleteBtn>\n          }\n        </ContactsItem>\n      ))}\n    </ListContacts>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst filterInitialState = '';\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState: filterInitialState,\n  reducers: {\n    setFilter: (state, actions) => actions.payload,\n  },\n});\n\nexport const { setFilter } = filtersSlice.actions;\nexport const filterReducer = filtersSlice.reducer;\n","import styled from 'styled-components';\n\nexport const FindLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 5px auto;\n  width: 300px;\n  padding: 8px;\n  font-weight: 500;\n  font-size: 42;\n  color: #5389e6;\n`;\n\nexport const FindInput = styled.input`\n  padding: 5px;\n  margin: 5px 0;\n  border-radius: 5px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { getFilter } from '../../redux/contacts/selectors';\n\nimport { FindLabel, FindInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilterInput = event => {\n    const { value } = event.target;\n    const action = setFilter(value);\n    dispatch(action);\n  };\n\n  return (\n    <FindLabel>\n      Find contacts by name\n      <FindInput\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        onChange={handleFilterInput}\n      ></FindInput>\n    </FindLabel>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n  margin: 10px auto;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n`;\n\nexport const LabelData = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 5px;\n`;\n\nexport const InputData = styled.input`\n  margin: 5px;\n  padding: 5px;\n  border-radius: 5px;\n`;\n\nexport const AddBtn = styled.button`\n  width: 200px;\n  height: 30px;\n  margin: 10px auto;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n  background-color: #719ae2;\n  cursor: pointer;\n  color: #0d0d0d;\n`;\n","import { useDispatch } from 'react-redux';\nimport { addContact, fetchContacts } from 'redux/contacts/operations';\n\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { Form, AddBtn, InputData, LabelData } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(addContact({ id: nanoid(), name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <LabelData>\n        Name\n        <InputData\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </LabelData>\n      <LabelData>\n        Number\n        <InputData\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </LabelData>\n      <AddBtn type=\"submit\">Add contact</AddBtn>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const ContactTitle = styled.h2`\n  font-weight: 500;\n  font-size: 48;\n  text-align: center;\n  color: #5389e6;\n`;\n\nexport const ContactsList = styled.h3`\n  font-weight: 500;\n  font-size: 42;\n  text-align: center;\n  color: #5389e6;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { ContactTitle, ContactsList } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactTitle>Phonebook</ContactTitle>\n      <ContactForm />\n\n      <div>{isLoading && 'Request in progress...'}</div>\n\n      <Filter />\n      <ContactsList>Contacts</ContactsList>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","ListContacts","styled","ContactsItem","DeleteBtn","ContactList","useSelector","dispatch","useDispatch","console","log","map","name","number","id","type","onClick","deleteId","action","deleteContact","handleDeleteContact","filtersSlice","createSlice","initialState","reducers","setFilter","actions","payload","FindLabel","reducer","FindInput","Filter","value","onChange","event","target","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","LabelData","InputData","AddBtn","ContactForm","useState","setName","setPhone","useEffect","fetchContacts","handleChange","currentTarget","reset","onSubmit","preventDefault","addContact","pattern","title","required","ContactTitle","ContactsList","Contacts","Helmet"],"sourceRoot":""}