{"version":3,"file":"static/js/804.eb41f733.chunk.js","mappings":"kOAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAEjBC,EAAe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,6BCFpBC,EAAeC,EAAAA,GAAAA,GAAH,kMASZC,EAAeD,EAAAA,GAAAA,GAAH,yCAIZE,EAAYF,EAAAA,GAAAA,OAAH,wQ,SCTf,SAASG,IACd,IAAMV,GAAWW,EAAAA,EAAAA,IAAYb,GACvBK,GAASQ,EAAAA,EAAAA,IAAYT,GACrBU,GAAWC,EAAAA,EAAAA,MAcXC,EAPkB,WACtB,IAAMC,EAAmBZ,EAAOa,cAChC,OAAOhB,EAASG,QAAO,SAAAc,GAAO,OAC5BA,EAAQC,KAAKF,cAAcG,SAASJ,EADR,GAG/B,CAE2BK,GAE5B,OACE,SAACd,EAAD,UACGQ,EAAoBO,KAAI,gBAAGH,EAAH,EAAGA,KAAMI,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACvB,UAACf,EAAD,WACGU,EAAO,MAAQI,GAEd,SAACb,EAAD,CACEe,KAAK,SACLN,KAAK,SACLO,QAAS,kBAvBO,SAAAC,GAC1B,IAAMC,GAASC,EAAAA,EAAAA,IAAcF,GAC7Bd,EAASe,EACV,CAoB0BE,CAAoBN,EAA1B,EAHX,sBAHeA,EADI,KAgB9B,C,+BCzCYO,EAAOvB,EAAAA,GAAAA,KAAH,iQAWJwB,EAAYxB,EAAAA,GAAAA,MAAH,qFAMTyB,EAAYzB,EAAAA,GAAAA,MAAH,gFAMT0B,EAAS1B,EAAAA,GAAAA,OAAH,yRCjBZ,SAAS2B,IACd,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOjB,EAAP,KAAakB,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOb,EAAP,KAAce,EAAd,KAEMzB,GAAWC,EAAAA,EAAAA,OAEjByB,EAAAA,EAAAA,YAAU,WACR1B,GAAS2B,EAAAA,EAAAA,MACV,GAAE,CAAC3B,IAEJ,IAAM4B,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,cAAtBxB,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,MAEd,OAAQzB,GACN,IAAK,OACHkB,EAAQO,GACR,MAEF,IAAK,QACHN,EAASM,GACT,MAEF,QACE,OAEL,EASKC,EAAQ,WACZR,EAAQ,IACRC,EAAS,GACV,EAED,OACE,UAACP,EAAD,CAAMe,SAba,SAAAJ,GACnBA,EAAMK,iBAENlC,GAASmC,EAAAA,EAAAA,IAAW,CAAExB,IAAIyB,EAAAA,EAAAA,MAAU9B,KAAAA,EAAMI,MAAAA,KAC1CsB,GACD,EAQC,WACE,UAACb,EAAD,mBAEE,SAACC,EAAD,CACER,KAAK,OACLN,KAAK,OACL+B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRR,MAAOzB,EACPkC,SAAUZ,QAGd,UAACT,EAAD,qBAEE,SAACC,EAAD,CACER,KAAK,MACLN,KAAK,QACL+B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRR,MAAOrB,EACP8B,SAAUZ,QAGd,SAACP,EAAD,CAAQT,KAAK,SAAb,2BAGL,CCpEc,SAAS6B,IACtB,IAAMzC,GAAWC,EAAAA,EAAAA,MACXR,GAAYM,EAAAA,EAAAA,IAAYP,GAM9B,OAJAkC,EAAAA,EAAAA,YAAU,WACR1B,GAAS2B,EAAAA,EAAAA,MACV,GAAE,CAAC3B,KAGF,iCACE,SAAC0C,EAAA,EAAD,WACE,iDAEF,SAACpB,EAAD,KACA,yBAAM7B,GAAa,4BACnB,SAACK,EAAD,MAGL,C","sources":["redux/contacts/selectors.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import styled from 'styled-components';\n\nexport const ListContacts = styled.ul`\n  width: 400px;\n\n  margin: 0 auto;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n`;\n\nexport const ContactsItem = styled.li`\n  margin: 10px;\n`;\n\nexport const DeleteBtn = styled.button`\n  margin-left: 10px;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n  background-color: #719ae2;\n  cursor: pointer;\n  color: #0d0d0d;\n  border: gray;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { ListContacts, ContactsItem, DeleteBtn } from './ContactList.styled';\n\nexport function ContactList() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = deleteId => {\n    const action = deleteContact(deleteId);\n    dispatch(action);\n  };\n\n  const filtredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContactList = filtredContacts();\n\n  return (\n    <ListContacts>\n      {filteredContactList.map(({ name, phone, id }) => (\n        <ContactsItem key={id}>\n          {name + ' : ' + phone}\n          {\n            <DeleteBtn\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => handleDeleteContact(id)}\n            >\n              Delete\n            </DeleteBtn>\n          }\n        </ContactsItem>\n      ))}\n    </ListContacts>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n  margin: 10px auto;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n`;\n\nexport const LabelData = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 5px;\n`;\n\nexport const InputData = styled.input`\n  margin: 5px;\n  padding: 5px;\n  border-radius: 5px;\n`;\n\nexport const AddBtn = styled.button`\n  width: 200px;\n  height: 30px;\n  margin: 10px auto;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  border-radius: 5px;\n  background-color: #719ae2;\n  cursor: pointer;\n  color: #0d0d0d;\n`;\n","import { useDispatch } from 'react-redux';\nimport { addContact, fetchContacts } from 'redux/contacts/operations';\n\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { Form, AddBtn, InputData, LabelData } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(addContact({ id: nanoid(), name, phone }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <LabelData>\n        Name\n        <InputData\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </LabelData>\n      <LabelData>\n        Number\n        <InputData\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={phone}\n          onChange={handleChange}\n        />\n      </LabelData>\n      <AddBtn type=\"submit\">Add contact</AddBtn>\n    </Form>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contactss</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","ListContacts","styled","ContactsItem","DeleteBtn","ContactList","useSelector","dispatch","useDispatch","filteredContactList","normalizedFilter","toLowerCase","contact","name","includes","filtredContacts","map","phone","id","type","onClick","deleteId","action","deleteContact","handleDeleteContact","Form","LabelData","InputData","AddBtn","ContactForm","useState","setName","setPhone","useEffect","fetchContacts","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","addContact","nanoid","pattern","title","required","onChange","Contacts","Helmet"],"sourceRoot":""}